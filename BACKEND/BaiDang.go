package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"github.com/gorilla/mux"
	redisv9 "github.com/redis/go-redis/v9"

	// c√°c import s·∫µn c√≥ c·ªßa b·∫°n ·ªü tr√™n...

	"github.com/gomarkdown/markdown"
	"github.com/gomarkdown/markdown/html"
	"github.com/microcosm-cc/bluemonday"
)
var ctx = context.Background()

var redisClient = redisv9.NewClient(&redisv9.Options{
	Addr:     "localhost:6379", // N·∫øu Redis ch·∫°y local
	Password: "",               // N·∫øu Redis kh√¥ng c√≥ m·∫≠t kh·∫©u
	DB:       0,                // DB m·∫∑c ƒë·ªãnh l√† 0
})
type BaiDang struct {
	TieuDe     string `json:"tieuDe"`
	NoiDung    string `json:"noiDung"`
	IDTaiKhoan int    `json:"idTaiKhoan"`
}


func renderMarkdown(input string) string {
	// Chuy·ªÉn t·ª´ markdown sang HTML
	output := markdown.ToHTML([]byte(input), nil, html.NewRenderer(html.RendererOptions{
		Flags: html.CommonFlags | html.HrefTargetBlank,
	}))

	// L√†m s·∫°ch HTML ƒë·ªÉ tr√°nh XSS
	policy := bluemonday.UGCPolicy()
	safe := policy.SanitizeBytes(output)

	return string(safe)
}

// ========== ƒêƒÉng b√†i ==========
func DangBai(w http.ResponseWriter, r *http.Request) {
	// CORS headers
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, DELETE, OPTIONS")
	w.Header().Set("Content-Type", "application/json")
	if r.Method == http.MethodOptions {
		w.WriteHeader(http.StatusOK)
		return
	}
	if r.Method != http.MethodPost {
		http.Error(w, "Ch·ªâ h·ªó tr·ª£ POST", http.StatusMethodNotAllowed)
		return
	}

	// ‚úÖ L·∫•y user t·ª´ token JWT
	token, err := validateToken(r)
	if err != nil {
		http.Error(w, "Unauthorized: "+err.Error(), http.StatusUnauthorized)
		return
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		http.Error(w, "Unauthorized: Invalid claims", http.StatusUnauthorized)
		return
	}

	idTaiKhoanFloat, ok := claims["id"].(float64)
	if !ok {
		http.Error(w, "Unauthorized: Invalid user ID in token", http.StatusUnauthorized)
		return
	}
	idTaiKhoan := int(idTaiKhoanFloat)

	// ‚úÖ Decode b√†i ƒëƒÉng nh∆∞ng KH√îNG nh·∫≠n IDTaiKhoan t·ª´ client
	var bai struct {
		TieuDe  string `json:"tieuDe"`
		NoiDung string `json:"noiDung"`
	}
	if err := json.NewDecoder(r.Body).Decode(&bai); err != nil {
		http.Error(w, "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", http.StatusBadRequest)
		return
	}

	// ‚úÖ L∆∞u b√†i ƒëƒÉng v·ªõi idTaiKhoan t·ª´ token
	stmt := `INSERT INTO baidang (tieuDe, noiDung, idTaiKhoan, ngayDang) VALUES (?, ?, ?, ?)`
	if _, err := DB.ExecContext(ctx, stmt, bai.TieuDe, bai.NoiDung, idTaiKhoan, time.Now()); err != nil {
		log.Println("L·ªói ghi DB:", err)
		http.Error(w, "Kh√¥ng th·ªÉ l∆∞u b√†i vi·∫øt", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]string{
		"message": "ƒêƒÉng b√†i th√†nh c√¥ng",
	})
}


// ========== L·∫•y t·∫•t c·∫£ b√†i ƒëƒÉng ==========
func LayBaiDang(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, DELETE, OPTIONS")
	w.Header().Set("Content-Type", "application/json")
	if r.Method == http.MethodOptions {
		w.WriteHeader(http.StatusOK)
		return
	}

	if r.Method != http.MethodGet {
		http.Error(w, "Ch·ªâ h·ªó tr·ª£ GET", http.StatusMethodNotAllowed)
		return
	}

	rows, err := DB.QueryContext(ctx, `
		SELECT b.id, b.tieuDe, b.noiDung, b.idTaiKhoan, t.tenDangNhap, b.ngayDang
		FROM baidang b
		JOIN taikhoan t ON b.idTaiKhoan = t.id
		ORDER BY b.ngayDang DESC`)
	if err != nil {
		http.Error(w, "Kh√¥ng th·ªÉ l·∫•y b√†i vi·∫øt", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var danhSach []map[string]interface{}
	for rows.Next() {
		var id, idTaiKhoan int
		var tieuDe, noiDung, tenDangNhap string
		var ngayDang time.Time

		if err := rows.Scan(&id, &tieuDe, &noiDung, &idTaiKhoan, &tenDangNhap, &ngayDang); err != nil {
			log.Println("L·ªói ƒë·ªçc h√†ng:", err)
			continue
		}

		danhSach = append(danhSach, map[string]interface{}{
			"id":           id,
			"tieuDe":       tieuDe,
			"noiDung":      renderMarkdown(noiDung),
			"idTaiKhoan":   idTaiKhoan,
			"tenDangNhap":  tenDangNhap,
			"ngayDang":     ngayDang.Format("02/01/2006 15:04"),
		})
	}

	json.NewEncoder(w).Encode(danhSach)
}

// ========== L·∫•y chi ti·∫øt b√†i ƒëƒÉng ==========
func LayChiTietBaiDang(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, DELETE, OPTIONS")
	w.Header().Set("Content-Type", "application/json")
	if r.Method == http.MethodOptions {
		w.WriteHeader(http.StatusOK)
		return
	}

	idStr := mux.Vars(r)["id"]
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "ID kh√¥ng h·ª£p l·ªá", http.StatusBadRequest)
		return
	}

	var tieuDe, noiDung string
	var idTaiKhoan int
	var ngayDang time.Time

	err = DB.QueryRowContext(ctx,
		`SELECT tieuDe, noiDung, idTaiKhoan, ngayDang FROM baidang WHERE id = ?`, id).
		Scan(&tieuDe, &noiDung, &idTaiKhoan, &ngayDang)
	if err != nil {
		http.Error(w, "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt", http.StatusNotFound)
		return
	}

	json.NewEncoder(w).Encode(map[string]interface{}{
		"id":         id,
		"tieuDe":     tieuDe,
		"noiDung":    renderMarkdown(noiDung),
		"idTaiKhoan": idTaiKhoan,
		"ngayDang":   ngayDang.Format("02/01/2006 15:04"),
	})
}


// ========== X√≥a b√†i ƒëƒÉng ==========
func XoaBaiDang(w http.ResponseWriter, r *http.Request) {
	// --- C·∫•u h√¨nh CORS v√† header ---
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, DELETE, OPTIONS")
	w.Header().Set("Content-Type", "application/json")

	// --- X·ª≠ l√Ω preflight request ---
	if r.Method == http.MethodOptions {
		w.WriteHeader(http.StatusOK)
		return
	}

	// --- Ch·ªâ cho ph√©p DELETE ---
	if r.Method != http.MethodDelete {
		http.Error(w, "Ch·ªâ h·ªó tr·ª£ DELETE", http.StatusMethodNotAllowed)
		return
	}

	// --- X√°c th·ª±c token ---
	token, err := validateToken(r)
	if err != nil {
		http.Error(w, "Unauthorized: "+err.Error(), http.StatusUnauthorized)
		return
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		http.Error(w, "Unauthorized: Invalid token claims", http.StatusUnauthorized)
		return
	}

	// --- L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ token ---
	idFloat, okID := claims["id"].(float64)
	username, _ := claims["tenDangNhap"].(string)

	// Ki·ªÉm tra quy·ªÅn h·ª£p l·ªá
	quyenRaw, exists := claims["phanQuyen"]
	if !okID || !exists || quyenRaw == nil {
		http.Error(w, "Unauthorized: Thi·∫øu th√¥ng tin trong token", http.StatusUnauthorized)
		return
	}
	quyen, ok := quyenRaw.(string)
	if !ok {
		http.Error(w, "Unauthorized: Quy·ªÅn kh√¥ng h·ª£p l·ªá", http.StatusUnauthorized)
		return
	}

	idNguoiDung := int(idFloat)
	fmt.Printf("üßæ Token ng∆∞·ªùi d√πng: ID=%d | T√™n=%s | Quy·ªÅn=%s\n", idNguoiDung, username, quyen)

	// --- L·∫•y ID b√†i ƒëƒÉng t·ª´ URL ---
	idStr := mux.Vars(r)["id"]
	idBaiDang, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "ID b√†i ƒëƒÉng kh√¥ng h·ª£p l·ªá", http.StatusBadRequest)
		return
	}

	// --- Truy v·∫•n ID ch·ªß b√†i vi·∫øt t·ª´ CSDL ---
	var idChuBai int
	err = DB.QueryRowContext(ctx, "SELECT idTaiKhoan FROM baidang WHERE id = ?", idBaiDang).Scan(&idChuBai)
	if err == sql.ErrNoRows {
		http.Error(w, "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i", http.StatusNotFound)
		return
	} else if err != nil {
		http.Error(w, "L·ªói truy v·∫•n b√†i vi·∫øt", http.StatusInternalServerError)
		return
	}

	// --- Ki·ªÉm tra quy·ªÅn x√≥a ---
	if idNguoiDung != idChuBai && quyen != "admin" {
		http.Error(w, "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt n√†y", http.StatusForbidden)
		return
	}

	// --- B·∫Øt ƒë·∫ßu transaction ---
	tx, err := DB.BeginTx(ctx, nil)
	if err != nil {
		http.Error(w, "Kh√¥ng th·ªÉ kh·ªüi t·∫°o giao d·ªãch", http.StatusInternalServerError)
		return
	}
	defer tx.Rollback()

	// --- X√≥a d·ªØ li·ªáu li√™n quan ---
	if _, err := tx.ExecContext(ctx, "DELETE FROM binhluan WHERE idBaiDang = ?", idBaiDang); err != nil {
		http.Error(w, "L·ªói khi x√≥a b√¨nh lu·∫≠n", http.StatusInternalServerError)
		return
	}
	if _, err := tx.ExecContext(ctx, "DELETE FROM cam_xuc WHERE idBaiDang = ?", idBaiDang); err != nil {
		http.Error(w, "L·ªói khi x√≥a c·∫£m x√∫c", http.StatusInternalServerError)
		return
	}

	// --- X√≥a b√†i ƒëƒÉng ---
	res, err := tx.ExecContext(ctx, "DELETE FROM baidang WHERE id = ?", idBaiDang)
	if err != nil {
		http.Error(w, "L·ªói khi x√≥a b√†i vi·∫øt", http.StatusInternalServerError)
		return
	}
	rowsAffected, _ := res.RowsAffected()
	if rowsAffected == 0 {
		http.Error(w, "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ x√≥a", http.StatusNotFound)
		return
	}

	// --- X√°c nh·∫≠n transaction ---
	if err := tx.Commit(); err != nil {
		http.Error(w, "L·ªói khi x√°c nh·∫≠n x√≥a b√†i", http.StatusInternalServerError)
		return
	}

	// --- Ph·∫£n h·ªìi th√†nh c√¥ng ---
	json.NewEncoder(w).Encode(map[string]interface{}{
		"success": true,
		"message": "ƒê√£ x√≥a b√†i vi·∫øt v√† d·ªØ li·ªáu li√™n quan",
		"id":      idBaiDang,
	})
}



func ThemCamXuc(w http.ResponseWriter, r *http.Request) {
	// CORS headers
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")

	if r.Method == http.MethodOptions {
		w.WriteHeader(http.StatusOK)
		return
	}

	if r.Method != http.MethodPost {
		http.Error(w, "Ch·ªâ h·ªó tr·ª£ ph∆∞∆°ng th·ª©c POST", http.StatusMethodNotAllowed)
		return
	}

	// --- X√°c th·ª±c token ---
	token, err := validateToken(r)
	if err != nil {
		http.Error(w, "Unauthorized: "+err.Error(), http.StatusUnauthorized)
		return
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		http.Error(w, "Unauthorized: Invalid claims", http.StatusUnauthorized)
		return
	}

	idTaiKhoanFloat, ok := claims["id"].(float64)
	if !ok {
		http.Error(w, "Unauthorized: Invalid user ID in token", http.StatusUnauthorized)
		return
	}
	idTaiKhoan := int(idTaiKhoanFloat)

	// --- Parse request body ---
	var request struct {
		LoaiCamXuc string `json:"loaiCamXuc"`
	}
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		http.Error(w, "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", http.StatusBadRequest)
		return
	}

	// L·∫•y idBaiDang t·ª´ URL params
	params := mux.Vars(r)
	idBaiDang, err := strconv.Atoi(params["idBaiDang"])
	if err != nil {
		http.Error(w, "ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá", http.StatusBadRequest)
		return
	}

	// Ki·ªÉm tra lo·∫°i c·∫£m x√∫c h·ª£p l·ªá
	validEmotions := map[string]bool{
		"like": true, "dislike": true, "love": true,
		"haha": true, "wow": true, "sad": true, "angry": true,
	}
	if !validEmotions[request.LoaiCamXuc] {
		http.Error(w, "Lo·∫°i c·∫£m x√∫c kh√¥ng h·ª£p l·ªá", http.StatusBadRequest)
		return
	}


	tx, err := DB.Begin()
	if err != nil {
		log.Println("L·ªói kh·ªüi t·∫°o transaction:", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	defer tx.Rollback()

	var exists bool
	err = tx.QueryRow("SELECT EXISTS(SELECT 1 FROM baidang WHERE id = ?)", idBaiDang).Scan(&exists)
	if err != nil || !exists {
		http.Error(w, "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i", http.StatusNotFound)
		return
	}

	_, err = tx.Exec(`
		INSERT INTO cam_xuc (idBaiDang, idTaiKhoan, loaiCamXuc)
		VALUES (?, ?, ?)
		ON DUPLICATE KEY UPDATE loaiCamXuc = VALUES(loaiCamXuc)
	`, idBaiDang, idTaiKhoan, request.LoaiCamXuc)

	if err != nil {
		log.Println("L·ªói DB:", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	if err := tx.Commit(); err != nil {
		log.Println("L·ªói commit:", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	// ‚úÖ Xo√° cache c≈©
	cacheKey := fmt.Sprintf("reactions:%d", idBaiDang)
	redisClient.Del(ctx, cacheKey)

	// ‚úÖ Tr·∫£ v·ªÅ JSON
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"success": true,
		"action":  "updated",
		"emotion": request.LoaiCamXuc,
	})
}


func ThongKeCamXuc(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")

	params := mux.Vars(r)
	idBaiDang, err := strconv.Atoi(params["idBaiDang"])
	if err != nil {
		http.Error(w, "ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá", http.StatusBadRequest)
		return
	}

	cacheKey := fmt.Sprintf("reactions:%d", idBaiDang)
	if cached, err := redisClient.Get(ctx, cacheKey).Result(); err == nil {
		w.Write([]byte(cached))
		return
	}

	rows, err := DB.Query(`
		SELECT loaiCamXuc, COUNT(*) as count 
		FROM cam_xuc 
		WHERE idBaiDang = ?
		GROUP BY loaiCamXuc
	`, idBaiDang)
	if err != nil {
		log.Println("L·ªói truy v·∫•n:", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	result := make(map[string]int)
	for rows.Next() {
		var loai string
		var count int
		if err := rows.Scan(&loai, &count); err != nil {
			log.Println("L·ªói ƒë·ªçc d·ªØ li·ªáu:", err)
			continue
		}
		result[loai] = count
	}

	// ‚úÖ L∆∞u cache trong 30 ph√∫t
	jsonData, _ := json.Marshal(result)
	redisClient.Set(ctx, cacheKey, string(jsonData), 30*time.Minute)

	json.NewEncoder(w).Encode(result)
}

func SuaBaiDang(w http.ResponseWriter, r *http.Request) {
 vars := mux.Vars(r)
    idStr := vars["id"]
    id, err := strconv.Atoi(idStr)
    if err != nil {
        http.Error(w, "ID kh√¥ng h·ª£p l·ªá", http.StatusBadRequest)
        return
    }

    var data struct {
        TieuDe  string `json:"tieuDe"`
        NoiDung string `json:"noiDung"`
    }

    if err := json.NewDecoder(r.Body).Decode(&data); err != nil {
        http.Error(w, "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", http.StatusBadRequest)
        return
    }

    _, err = DB.Exec(`UPDATE baidang SET tieuDe = ?, noiDung = ? WHERE id = ?`, data.TieuDe, data.NoiDung, id)
    if err != nil {
        http.Error(w, "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b√†i vi·∫øt", http.StatusInternalServerError)
        return
    }

    json.NewEncoder(w).Encode(map[string]string{
        "message": "C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!",
    })
}

func XoaBinhLuan(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    idStr := vars["id"]
    id, err := strconv.Atoi(idStr)
    if err != nil {
        http.Error(w, "ID kh√¥ng h·ª£p l·ªá", http.StatusBadRequest)
        return
    }

    _, err = DB.Exec(`DELETE FROM binhluan WHERE id = ?`, id)
    if err != nil {
        http.Error(w, "Kh√¥ng th·ªÉ x√≥a b√¨nh lu·∫≠n", http.StatusInternalServerError)
        return
    }

    json.NewEncoder(w).Encode(map[string]string{
        "message": "ƒê√£ x√≥a b√¨nh lu·∫≠n th√†nh c√¥ng!",
    })
}

